from Sales import Sales

class Product:
    # Text files to be used
    products_file = "products.txt"
    stock_file = "stock.txt"

    # Constructor Method
    def __init__(self, prod_code, prod_name, prod_description,prod_qty, prod_price,prod_location):
        self._prod_code = prod_code
        self._prod_name = prod_name
        self._prod_description = prod_description
        self._prod_qty = prod_qty
        self._prod_price = prod_price
        self._prod_location = prod_location

    # Getters methods
    def get_prod_code(self):
        return self._prod_code

    def get_prod_name(self):
        return self._prod_name
    
    def get_prod_description(self):
        return self._prod_description
    
    def get_prod_qty(self):
        return self._prod_qty
    
    def get_prod_price(self):
        return self._prod_price
    
    def get_prod_location(self):
        return self._prod_location

    # Setters methods
    def set_prod_code(self,value):
        self._prod_code = value
    
    def set_prod_name(self,value):
        self._prod_name = value
    
    def set_prod_description(self,value):
        self._prod_description
    
    def set_prod_qty(self,value):
        self._prod_qty = value
    
    def set_prod_price(self,value):
        self._prod_price = value
    
    def set_prod_location(self,value):
        self._prod_location = value
    

    def display_data(self):
        print(f"Product Code: {self._prod_code}")
        print(f"Product Name: {self._prod_name}")
        print(f"Product Description: {self._prod_description}")
        print(f"Quantity in stock: {self._prod_qty}")
        print(f"Product unit price: {self._prod_price}")
        print(f"Product shelf location: {self._prod_location}")
    
    # Method to read the content of the file and store is in a list
    def read_products(self):
        products = []
        try:
            with open(self.products_file, "r") as inputfile:
                for line in inputfile:
                    prod_code, prod_name, prod_description, prod_qty, prod_price, prod_location = line.strip().split(",")
                    products.append(Product(int(prod_code), prod_name, prod_description, int(prod_qty), float(prod_price), prod_location))
        except FileNotFoundError:
            print("Products file not found. Creating a new one.")
        return products
    
    # Method to add a new product to the system
    def add_product(self):
        with open(self.products_file, "a") as inputfile:
            inputfile.write(f"{self.prod_code},{self.prod_name},{self.prod_description},{self.prod_price},{self.prod_qty},{self.prod_location}\n")
        self.update_stock(self.prod_code, self.prod_qty)
        print(f"Product '{self.prod_name}' added successfully!")

    # Method to update a product's information
    def update_product(self, product_code, new_stock):
        products = self.read_products()
        updated = False
        with open(self.products_file, "w") as outputfile:
            for p in products:
                if p.prod_code == product_code:
                    p.prod_qty = new_stock
                    updated = True
                outputfile.write(f"{p.prod_code},{p.prod_name},{p.prod_description},{p.prod_price},{p.prod_qty},{p.prod_location}\n")
        if updated:
            self.update_stock(product_code, new_stock)
            print(f"Product code {product_code} updated successfully!")
        else:
            print(f"Product code {product_code} not found.")

    # Method to delete a product from the system
    def delete_product(self, product_id):
        products = self.read_products()
        updated_products = [p for p in products if p.prod_code != product_id]
        with open(self.products_file, "w") as outputfile:
            for p in updated_products:
                outputfile.write(f"{p.prod_code},{p.prod_name},{p.prod_description},{p.prod_price},{p.prod_qty},{p.prod_location}\n")
        print(f"Product code {product_id} deleted successfully!")
