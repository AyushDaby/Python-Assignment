from Sales import Sales

class Product:
    # Text files to be used
    products_file = "products.txt"
    stock_file = "stock.txt"

    # Constructor Method
    def __init__(self, prod_code, prod_name, prod_description,prod_qty, prod_price,prod_location):
        self._prod_code = prod_code
        self._prod_name = prod_name
        self._prod_description = prod_description
        self._prod_qty = prod_qty
        self._prod_price = prod_price
        self._prod_location = prod_location

    # Getters methods
    def get_prod_code(self):
        return self._prod_code

    def get_prod_name(self):
        return self._prod_name
    
    def get_prod_description(self):
        return self._prod_description
    
    def get_prod_qty(self):
        return self._prod_qty
    
    def get_prod_price(self):
        return self._prod_price
    
    def get_prod_location(self):
        return self._prod_location

    # Setters methods
    def set_prod_code(self,value):
        self._prod_code = value
    
    def set_prod_name(self,value):
        self._prod_name = value
    
    def set_prod_description(self,value):
        self._prod_description
    
    def set_prod_qty(self,value):
        self._prod_qty = value
    
    def set_prod_price(self,value):
        self._prod_price = value
    
    def set_prod_location(self,value):
        self._prod_location = value
    

    def display_data(self):
        print(f"Product Code: {self._prod_code}")
        print(f"Product Name: {self._prod_name}")
        print(f"Product Description: {self._prod_description}")
        print(f"Quantity in stock: {self._prod_qty}")
        print(f"Product unit price: {self._prod_price}")
        print(f"Product shelf location: {self._prod_location}")
    
    def add_product(self):
        try:
            with open(self.products_file, "r") as checkfile:
                first_line = checkfile.readline()
                if not first_line.strip():  # If the file is empty or has no headers
                    with open(self.products_file, "w") as inputfile:
                        inputfile.write("Code, Name, Description, Quantity, Price, Location\n")
        except FileNotFoundError:
            # If the file doesn't exist, create it and add headers
            with open(self.products_file, "w") as inputfile:
                inputfile.write("Code, Name, Description, Quantity, Price (Rs), Location\n")

        with open(self.products_file, "a") as inputfile:
            inputfile.write(f"{self._prod_code}, {self._prod_name}, {self._prod_description}, {self._prod_qty}, {self._prod_price}, {self._prod_location}\n")

        print(f"Product '{self._prod_name}' added successfully!")
        self.update_stock(self._prod_code, self._prod_qty)

    def update_stock(self, product_code, new_qty):
        updates = []
        try:
            # Read existing stock data
            with open(self.stock_file, "r") as inputfile:
                for line in inputfile:
                    code, qty = line.strip().split(",")
                    if code == product_code:
                        qty = str(new_qty)  # Update quantity if product code matches
                    updates.append(f"{code}, {qty}\n")

            # If the product code is not found, add a new entry
            found = False
            for line in updates:
                if product_code in line:
                    found = True
                    break
            if not found:
                updates.append(f"{product_code},{new_qty}\n")

            # Write updated stock data back to stock.txt
            with open(self.stock_file, "w") as outputfile:
                outputfile.writelines(updates)

            print(f"Stock for product code {product_code} updated to {new_qty}.")
        except FileNotFoundError:
            # If stock.txt doesn't exist, create it and add the new product
            with open(self.stock_file, "w") as outputfile:
                outputfile.write(f"{product_code}, {new_qty}\n")
            print(f"Stock file created and product code {product_code} added with quantity {new_qty}.")
        except Exception as e:
            print(f"An error occurred: {e}")
